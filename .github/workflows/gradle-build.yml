name: Docker Build and Deploy with AWS Secrets

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Check out the code
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # PR의 소스 브랜치를 명시적으로 체크아웃
          fetch-depth: 0  # 전체 커밋 내역을 가져옴

      # 3. Get last commit message to determine deployment target
      - name: Get last commit message
        id: commit_msg
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "COMMIT_MSG=$(echo "$COMMIT_MSG" | sed 's/#/%23/g' | tr -d '\n')" >> $GITHUB_ENV

      # 4. Extract hash tags from the commit message
      - name: Extract all hash tags
        id: extract_hash_tags
        run: |
          HASH_TAGS=$(echo "${{ env.COMMIT_MSG }}" | grep -oE '%23[a-zA-Z0-9_-]+' | sed 's/%23/#/g' | tr '\n' ' ')
          if [ -z "$HASH_TAGS" ]; then
            echo "HASH_TAGS=default" >> $GITHUB_ENV
          else
            echo "HASH_TAGS=$HASH_TAGS" >> $GITHUB_ENV
          fi

      # 5. Set server host based on hash tag
      - name: Set server host based on hash tag
        run: |
          if [[ "${{ env.HASH_TAGS }}" == *"#search"* ]]; then
            echo "SERVER_HOST=${{ secrets.SEARCH_SERVER_HOST }}" >> $GITHUB_ENV
          elif [[ "${{ env.HASH_TAGS }}" == *"#timeDeal"* ]]; then
            echo "SERVER_HOST=${{ secrets.TIME_DEAL_SERVER }}" >> $GITHUB_ENV
          elif [[ "${{ env.HASH_TAGS }}" == *"#userservice"* ]]; then
            echo "SERVER_HOST=${{ secrets.AUTH_SERVER_HOST }}" >> $GITHUB_ENV
          elif [[ "${{ env.HASH_TAGS }}" == *"#gateway"* ]]; then
            echo "SERVER_HOST=${{ secrets.GATEWAY_SERVER_HOST }}" >> $GITHUB_ENV
          else
            echo "SERVER_HOST=${{ secrets.DEFAULT_SERVER_HOST }}" >> $GITHUB_ENV
          fi

      # 6. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 7. Set up Gradle
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      # 7. Build with Gradle
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 8. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9. Build Docker images for each hash tag and set LOWERCASE_TAG as environment variable
      - name: Build Docker images for each hash tag
        run: |
          for tag in "${{ env.HASH_TAGS }}"; do
            CLEAN_TAG=$(echo "$tag" | sed 's/#//g' | xargs)  # '#'을 제거하고 공백 제거
            DOCKERFILE_DIR="./$CLEAN_TAG"
          
            if [ -d "$DOCKERFILE_DIR" ]; then
              cd "$DOCKERFILE_DIR"
          
              LOWERCASE_TAG=$(echo "$CLEAN_TAG" | tr '[:upper:]' '[:lower:]')
              echo "Setting LOWERCASE_TAG: $LOWERCASE_TAG"
              echo "LOWERCASE_TAG=$LOWERCASE_TAG" >> $GITHUB_ENV  # 환경 변수로 설정
          
              docker buildx build -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/$LOWERCASE_TAG:latest \
                --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
                --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
                --build-arg AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
                .
          
              cd -
            else
              echo "Directory $DOCKERFILE_DIR does not exist, skipping..."
            fi
          done

      # 10. Deploy to Remote Server
      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v1.0.3
        env:
          LOWERCASE_TAG: ${{ env.LOWERCASE_TAG }}
        with:
          host: ${{ env.SERVER_HOST }}  # 동적으로 설정된 서버 호스트
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: LOWERCASE_TAG
          script: |
            docker compose down
            docker image prune -a -f
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$LOWERCASE_TAG:latest
            docker compose up -d
            
