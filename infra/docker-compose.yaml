version: '3.9'

services:
  postgres:
    container_name: postgres
    image: postgres:15
    ports:
      - "5432:5432"
    restart: always
    env_file: ./postgres/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/initdb.d:/docker-entrypoint-initdb.d:rw
    networks:
      - infra_network

  redis:
    container_name: redis
    image: redis:7.0.11
    ports:
      - "6379:6379"
    restart: always
    labels:
      - "name=redis"
      - "mode=standalone"
    env_file: ./redis/.env
    volumes:
      - redis_data:/data:rw
      - ./redis/etc/redis.conf:/etc/redis.conf:rw
    command: redis-server /etc/redis.conf
    networks:
      - infra_network

  redis-slave:
    image: redis:7.0.11
    hostname: redis-slave
    volumes:
      - redis_slave:/data
      - ./redis/etc/slave.conf:/etc/slave.conf:rw
    env_file: ./redis/.env
    ports:
      - "6479:6379"
    command: redis-server /etc/slave.conf
    networks:
      - infra_network

  mongo:
    container_name: mongo
    image: mongo:latest
    ports:
      - "27017:27017"
    env_file: ./mongodb/.env
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/initdb.d:/docker-entrypoint-initdb.d:rw
    networks:
      - infra_network

  mongo2:
    container_name: mongo2
    image: mongo:latest
    ports:
      - "27018:27017"
    env_file: ./mongodb/.env
    volumes:
      - mongodb_data2:/data/db
      - ./mongodb/initdb.d:/docker-entrypoint-initdb.d:rw
    networks:
      - infra_network

  prometheus:
    container_name: prometheus
    image: bitnami/prometheus
    volumes:
      - ./promethus/conf/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - infra_network

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - infra_network

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - infra_network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.30.1.28:9092  # Docker Desktop(Mac, Windows)에서 사용 가능
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      - infra_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "9090:8080"
    depends_on:
      - kafka
    networks:
      - infra_network


volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  redis_insight_data:
  rabbitmq_data:
  minio_data:
  mongodb_data2:
  redis_slave:

networks:
  infra_network:
